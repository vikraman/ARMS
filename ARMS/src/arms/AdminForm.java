/*
 * Automatic Routine Management System
 */

/*
 * AdminForm.java
 *
 * Created on Mar 16, 2010, 4:18:00 AM
 */
package arms;

import java.util.ArrayList;
import javax.swing.JOptionPane;
import org.jdesktop.application.Action;

/**
 *
 * @author vh4x0r
 */
public class AdminForm extends javax.swing.JFrame {

    /** Creates new form AdminForm */
    public AdminForm(ArrayList<Teacher> teachers, ArrayList<Subject> subjects, boolean flag) {
        this.teachers = teachers;
        this.subjects = subjects;
        this.flag = flag;
        initComponents();
        if (flag == false) {
            JOptionPane.showMessageDialog(null, "Solution needs to be updated !", "Alert", JOptionPane.WARNING_MESSAGE);
        }
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        adminTabbedPane = new javax.swing.JTabbedPane();
        teacherPanel = new javax.swing.JPanel();
        teacherScrollPane = new javax.swing.JScrollPane();
        teacherList = new javax.swing.JList();
        nameLabel = new javax.swing.JLabel();
        idLabel = new javax.swing.JLabel();
        loginLabel = new javax.swing.JLabel();
        downButton = new javax.swing.JButton();
        upButton = new javax.swing.JButton();
        deleteTeacherButton = new javax.swing.JButton();
        editTeacherButton = new javax.swing.JButton();
        addTeacherButton = new javax.swing.JButton();
        nameTextField = new javax.swing.JTextField();
        idTextField = new javax.swing.JTextField();
        loginTextField = new javax.swing.JTextField();
        listButton = new javax.swing.JButton();
        subPanel = new javax.swing.JPanel();
        subScrollPane = new javax.swing.JScrollPane();
        subList = new javax.swing.JList();
        subLabel = new javax.swing.JLabel();
        subIdLabel = new javax.swing.JLabel();
        deleteSubButton = new javax.swing.JButton();
        addSubButton = new javax.swing.JButton();
        editSubButton = new javax.swing.JButton();
        subTextField = new javax.swing.JTextField();
        subIdTextField = new javax.swing.JTextField();
        listTeacherButton = new javax.swing.JButton();
        solutionPanel = new javax.swing.JPanel();
        viewSolutionButton = new javax.swing.JButton();
        viewNewSolutionButton = new javax.swing.JButton();
        writeSolutionButton = new javax.swing.JButton();
        discardSolutionButton = new javax.swing.JButton();
        settingsPanel = new javax.swing.JPanel();
        psrButton = new javax.swing.JButton();
        userPasswdButton = new javax.swing.JButton();
        adminPasswdButton = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        org.jdesktop.application.ResourceMap resourceMap = org.jdesktop.application.Application.getInstance(arms.ARMSApp.class).getContext().getResourceMap(AdminForm.class);
        setTitle(resourceMap.getString("Form.title")); // NOI18N
        setName("Form"); // NOI18N

        adminTabbedPane.setToolTipText(resourceMap.getString("adminTabbedPane.toolTipText")); // NOI18N
        adminTabbedPane.setName("adminTabbedPane"); // NOI18N

        teacherPanel.setName("teacherPanel"); // NOI18N

        teacherScrollPane.setName("teacherScrollPane"); // NOI18N

        teacherList.setModel(new javax.swing.AbstractListModel() {
            Object[] strings = teachers.toArray();
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        teacherList.setName("teacherList"); // NOI18N
        teacherList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                teacherListValueChanged(evt);
            }
        });
        teacherScrollPane.setViewportView(teacherList);

        nameLabel.setText(resourceMap.getString("nameLabel.text")); // NOI18N
        nameLabel.setName("nameLabel"); // NOI18N

        idLabel.setText(resourceMap.getString("idLabel.text")); // NOI18N
        idLabel.setName("idLabel"); // NOI18N

        loginLabel.setText(resourceMap.getString("loginLabel.text")); // NOI18N
        loginLabel.setName("loginLabel"); // NOI18N

        javax.swing.ActionMap actionMap = org.jdesktop.application.Application.getInstance(arms.ARMSApp.class).getContext().getActionMap(AdminForm.class, this);
        downButton.setAction(actionMap.get("moveDown")); // NOI18N
        downButton.setText(resourceMap.getString("downButton.text")); // NOI18N
        downButton.setName("downButton"); // NOI18N
        downButton.setEnabled(false);

        upButton.setAction(actionMap.get("moveUp")); // NOI18N
        upButton.setText(resourceMap.getString("upButton.text")); // NOI18N
        upButton.setName("upButton"); // NOI18N
        upButton.setEnabled(false);

        deleteTeacherButton.setAction(actionMap.get("deleteTeacher")); // NOI18N
        deleteTeacherButton.setText(resourceMap.getString("deleteTeacherButton.text")); // NOI18N
        deleteTeacherButton.setName("deleteTeacherButton"); // NOI18N
        deleteTeacherButton.setEnabled(false);

        editTeacherButton.setAction(actionMap.get("editTeacher")); // NOI18N
        editTeacherButton.setText(resourceMap.getString("editTeacherButton.text")); // NOI18N
        editTeacherButton.setName("editTeacherButton"); // NOI18N
        editTeacherButton.setEnabled(false);

        addTeacherButton.setAction(actionMap.get("addTeacher")); // NOI18N
        addTeacherButton.setText(resourceMap.getString("addTeacherButton.text")); // NOI18N
        addTeacherButton.setName("addTeacherButton"); // NOI18N

        nameTextField.setEditable(false);
        nameTextField.setText(resourceMap.getString("nameTextField.text")); // NOI18N
        nameTextField.setBorder(null);
        nameTextField.setName("nameTextField"); // NOI18N

        idTextField.setEditable(false);
        idTextField.setText(resourceMap.getString("idTextField.text")); // NOI18N
        idTextField.setBorder(null);
        idTextField.setName("idTextField"); // NOI18N

        loginTextField.setEditable(false);
        loginTextField.setText(resourceMap.getString("loginTextField.text")); // NOI18N
        loginTextField.setBorder(null);
        loginTextField.setName("loginTextField"); // NOI18N

        listButton.setAction(actionMap.get("listPreference")); // NOI18N
        listButton.setText(resourceMap.getString("listButton.text")); // NOI18N
        listButton.setName("listButton"); // NOI18N
        listButton.setEnabled(false);

        javax.swing.GroupLayout teacherPanelLayout = new javax.swing.GroupLayout(teacherPanel);
        teacherPanel.setLayout(teacherPanelLayout);
        teacherPanelLayout.setHorizontalGroup(
            teacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(teacherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(teacherScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 266, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(teacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(teacherPanelLayout.createSequentialGroup()
                        .addGroup(teacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(teacherPanelLayout.createSequentialGroup()
                                .addComponent(loginLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 78, Short.MAX_VALUE)
                                .addGap(4, 4, 4))
                            .addComponent(idLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 82, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(teacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(idTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)
                            .addComponent(loginTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 127, Short.MAX_VALUE)))
                    .addGroup(teacherPanelLayout.createSequentialGroup()
                        .addComponent(nameLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 64, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(nameTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 145, Short.MAX_VALUE))
                    .addGroup(teacherPanelLayout.createSequentialGroup()
                        .addGroup(teacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(editTeacherButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(downButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE)
                            .addComponent(upButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 103, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(teacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(deleteTeacherButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(addTeacherButton, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE)
                            .addComponent(listButton, javax.swing.GroupLayout.DEFAULT_SIZE, 112, Short.MAX_VALUE))))
                .addContainerGap())
        );
        teacherPanelLayout.setVerticalGroup(
            teacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, teacherPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(teacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(teacherScrollPane, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addGroup(teacherPanelLayout.createSequentialGroup()
                        .addGroup(teacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(nameLabel)
                            .addComponent(nameTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(teacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(idLabel)
                            .addComponent(idTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(teacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(loginLabel)
                            .addComponent(loginTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 63, Short.MAX_VALUE)
                        .addGroup(teacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(addTeacherButton)
                            .addComponent(upButton))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(teacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteTeacherButton)
                            .addComponent(downButton))
                        .addGap(18, 18, 18)
                        .addGroup(teacherPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editTeacherButton)
                            .addComponent(listButton))))
                .addContainerGap())
        );

        teacherPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addTeacherButton, deleteTeacherButton, downButton, editTeacherButton, upButton});

        teacherPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {idLabel, idTextField, loginLabel, loginTextField, nameLabel, nameTextField});

        adminTabbedPane.addTab(resourceMap.getString("teacherPanel.TabConstraints.tabTitle"), teacherPanel); // NOI18N

        subPanel.setToolTipText(resourceMap.getString("subPanel.toolTipText")); // NOI18N
        subPanel.setName("subPanel"); // NOI18N

        subScrollPane.setName("subScrollPane"); // NOI18N

        subList.setModel(new javax.swing.AbstractListModel() {
            Object[] strings = subjects.toArray();
            public int getSize() { return strings.length; }
            public Object getElementAt(int i) { return strings[i]; }
        });
        subList.setName("subList"); // NOI18N
        subList.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                subListValueChanged(evt);
            }
        });
        subScrollPane.setViewportView(subList);

        subLabel.setText(resourceMap.getString("subLabel.text")); // NOI18N
        subLabel.setName("subLabel"); // NOI18N

        subIdLabel.setText(resourceMap.getString("subIdLabel.text")); // NOI18N
        subIdLabel.setName("subIdLabel"); // NOI18N

        deleteSubButton.setAction(actionMap.get("deleteSubject")); // NOI18N
        deleteSubButton.setText(resourceMap.getString("deleteSubButton.text")); // NOI18N
        deleteSubButton.setName("deleteSubButton"); // NOI18N
        deleteSubButton.setEnabled(false);

        addSubButton.setAction(actionMap.get("addSubject")); // NOI18N
        addSubButton.setText(resourceMap.getString("addSubButton.text")); // NOI18N
        addSubButton.setName("addSubButton"); // NOI18N

        editSubButton.setAction(actionMap.get("editSubject")); // NOI18N
        editSubButton.setText(resourceMap.getString("editSubButton.text")); // NOI18N
        editSubButton.setName("editSubButton"); // NOI18N
        editSubButton.setEnabled(false);

        subTextField.setEditable(false);
        subTextField.setText(resourceMap.getString("subTextField.text")); // NOI18N
        subTextField.setBorder(null);
        subTextField.setName("subTextField"); // NOI18N

        subIdTextField.setEditable(false);
        subIdTextField.setText(resourceMap.getString("subIdTextField.text")); // NOI18N
        subIdTextField.setBorder(null);
        subIdTextField.setName("subIdTextField"); // NOI18N

        listTeacherButton.setAction(actionMap.get("listTeachers")); // NOI18N
        listTeacherButton.setText(resourceMap.getString("listTeacherButton.text")); // NOI18N
        listTeacherButton.setName("listTeacherButton"); // NOI18N
        listTeacherButton.setEnabled(false);

        javax.swing.GroupLayout subPanelLayout = new javax.swing.GroupLayout(subPanel);
        subPanel.setLayout(subPanelLayout);
        subPanelLayout.setHorizontalGroup(
            subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(subScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 258, Short.MAX_VALUE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(subPanelLayout.createSequentialGroup()
                        .addComponent(subIdLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 75, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subIdTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 148, Short.MAX_VALUE))
                    .addGroup(subPanelLayout.createSequentialGroup()
                        .addComponent(subLabel, javax.swing.GroupLayout.DEFAULT_SIZE, 57, Short.MAX_VALUE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(subTextField, javax.swing.GroupLayout.DEFAULT_SIZE, 166, Short.MAX_VALUE))
                    .addGroup(subPanelLayout.createSequentialGroup()
                        .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(editSubButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE)
                            .addComponent(addSubButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, 110, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(listTeacherButton, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(deleteSubButton, javax.swing.GroupLayout.DEFAULT_SIZE, 113, Short.MAX_VALUE))))
                .addContainerGap())
        );
        subPanelLayout.setVerticalGroup(
            subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(subPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(subScrollPane, javax.swing.GroupLayout.DEFAULT_SIZE, 249, Short.MAX_VALUE)
                    .addGroup(subPanelLayout.createSequentialGroup()
                        .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(subLabel)
                            .addComponent(subTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(subIdLabel)
                            .addComponent(subIdTextField, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 133, Short.MAX_VALUE)
                        .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(deleteSubButton)
                            .addComponent(addSubButton))
                        .addGap(18, 18, 18)
                        .addGroup(subPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(editSubButton)
                            .addComponent(listTeacherButton))))
                .addContainerGap())
        );

        subPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {subIdLabel, subIdTextField, subLabel, subTextField});

        subPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {addSubButton, deleteSubButton, editSubButton});

        adminTabbedPane.addTab(resourceMap.getString("subPanel.TabConstraints.tabTitle"), subPanel); // NOI18N

        solutionPanel.setName("solutionPanel"); // NOI18N

        viewSolutionButton.setAction(actionMap.get("viewSolution")); // NOI18N
        viewSolutionButton.setText(resourceMap.getString("viewSolutionButton.text")); // NOI18N
        viewSolutionButton.setName("viewSolutionButton"); // NOI18N

        viewNewSolutionButton.setAction(actionMap.get("viewNewSolution")); // NOI18N
        viewNewSolutionButton.setText(resourceMap.getString("viewNewSolutionButton.text")); // NOI18N
        viewNewSolutionButton.setName("viewNewSolutionButton"); // NOI18N
        viewNewSolutionButton.setEnabled(!flag);

        writeSolutionButton.setAction(actionMap.get("writeSolution")); // NOI18N
        writeSolutionButton.setText(resourceMap.getString("writeSolutionButton.text")); // NOI18N
        writeSolutionButton.setName("writeSolutionButton"); // NOI18N
        writeSolutionButton.setEnabled(!flag);

        discardSolutionButton.setAction(actionMap.get("discardSolution")); // NOI18N
        discardSolutionButton.setText(resourceMap.getString("discardSolutionButton.text")); // NOI18N
        discardSolutionButton.setName("discardSolutionButton"); // NOI18N
        discardSolutionButton.setEnabled(!flag);

        javax.swing.GroupLayout solutionPanelLayout = new javax.swing.GroupLayout(solutionPanel);
        solutionPanel.setLayout(solutionPanelLayout);
        solutionPanelLayout.setHorizontalGroup(
            solutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(solutionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(solutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING, false)
                    .addComponent(discardSolutionButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(viewSolutionButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(viewNewSolutionButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(writeSolutionButton, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addContainerGap(349, Short.MAX_VALUE))
        );
        solutionPanelLayout.setVerticalGroup(
            solutionPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(solutionPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(viewSolutionButton)
                .addGap(18, 18, 18)
                .addComponent(viewNewSolutionButton)
                .addGap(18, 18, 18)
                .addComponent(writeSolutionButton)
                .addGap(18, 18, 18)
                .addComponent(discardSolutionButton)
                .addContainerGap(107, Short.MAX_VALUE))
        );

        adminTabbedPane.addTab(resourceMap.getString("solutionPanel.TabConstraints.tabTitle"), solutionPanel); // NOI18N

        settingsPanel.setName("settingsPanel"); // NOI18N

        psrButton.setAction(actionMap.get("updatePSR")); // NOI18N
        psrButton.setText(resourceMap.getString("psrButton.text")); // NOI18N
        psrButton.setName("psrButton"); // NOI18N

        userPasswdButton.setAction(actionMap.get("setUserPasswd")); // NOI18N
        userPasswdButton.setText(resourceMap.getString("userPasswdButton.text")); // NOI18N
        userPasswdButton.setName("userPasswdButton"); // NOI18N

        adminPasswdButton.setAction(actionMap.get("setAdminPasswd")); // NOI18N
        adminPasswdButton.setText(resourceMap.getString("adminPasswdButton.text")); // NOI18N
        adminPasswdButton.setName("adminPasswdButton"); // NOI18N

        javax.swing.GroupLayout settingsPanelLayout = new javax.swing.GroupLayout(settingsPanel);
        settingsPanel.setLayout(settingsPanelLayout);
        settingsPanelLayout.setHorizontalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addGroup(settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(psrButton)
                    .addComponent(userPasswdButton)
                    .addComponent(adminPasswdButton))
                .addContainerGap(356, Short.MAX_VALUE))
        );

        settingsPanelLayout.linkSize(javax.swing.SwingConstants.HORIZONTAL, new java.awt.Component[] {adminPasswdButton, psrButton, userPasswdButton});

        settingsPanelLayout.setVerticalGroup(
            settingsPanelLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(settingsPanelLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(psrButton)
                .addGap(18, 18, 18)
                .addComponent(userPasswdButton)
                .addGap(18, 18, 18)
                .addComponent(adminPasswdButton)
                .addContainerGap(150, Short.MAX_VALUE))
        );

        settingsPanelLayout.linkSize(javax.swing.SwingConstants.VERTICAL, new java.awt.Component[] {adminPasswdButton, psrButton, userPasswdButton});

        adminTabbedPane.addTab(resourceMap.getString("settingsPanel.TabConstraints.tabTitle"), settingsPanel); // NOI18N

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 534, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(adminTabbedPane, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 300, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    @Override
    public void dispose() {
        ARMSApp.getApplication().getMainFrame().setVisible(true);
        super.dispose();
    }

    @Action
    public void updatePSR() {
        String r = JOptionPane.showInputDialog("Update priority to seniority ratio :", ARMSManager.getPSR());
        if (r == null || r.isEmpty()) {
            return;
        }
        ARMSManager.setPSR(r);
    }

    @Action
    public void addTeacher() {
        String name = JOptionPane.showInputDialog(null, "Enter teacher name :", "Name", JOptionPane.QUESTION_MESSAGE);
        if (name == null || name.isEmpty()) {
            return;
        }
        String id = JOptionPane.showInputDialog(null, "Enter teacher id :", "ID", JOptionPane.QUESTION_MESSAGE);
        if (id == null || id.isEmpty()) {
            return;
        }
        String pass = JOptionPane.showInputDialog(null, "Enter password :", "Password", JOptionPane.QUESTION_MESSAGE);
        if (pass == null || pass.isEmpty()) {
            return;
        }
        Teacher t = new Teacher(name.trim(), id.trim(), pass);
        if (teachers.contains(t)) {
            JOptionPane.showMessageDialog(null, "Teacher with same id already exists !", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        teachers.add(t);
        teacherList.setListData(teachers.toArray());
    }

    @Action
    public void deleteTeacher() {
        int index = teacherList.getSelectedIndex();
        if (JOptionPane.showConfirmDialog(null, "Delete teacher ?", "Delete", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            teachers.remove(index);
            teacherList.setListData(teachers.toArray());
        }
    }

    @Action
    public void editTeacher() {
        int index = teacherList.getSelectedIndex();
        Teacher t = teachers.get(index);
        String name = JOptionPane.showInputDialog("Teacher name :", t.getName());
        if (name == null || name.isEmpty()) {
            return;
        }
        String id = JOptionPane.showInputDialog("Teacher id :", t.getId());
        if (id == null || id.isEmpty()) {
            return;
        }
        String pass = JOptionPane.showInputDialog("Password :", "");
        if (pass == null || pass.isEmpty()) {
            return;
        }
        t = new Teacher(name.trim(), id.trim(), pass);
        if (teachers.indexOf(t) != -1) {
            if (teachers.indexOf(t) != index || teachers.lastIndexOf(t) != index) {
                JOptionPane.showMessageDialog(null, "Teacher with same id already exists !", "Error", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        teachers.set(index, t);
        teacherList.setListData(teachers.toArray());
    }

    @Action
    public void moveUp() {
        int index = teacherList.getSelectedIndex();
        Teacher temp = teachers.get(index - 1);
        teachers.set(index - 1, teachers.get(index));
        teachers.set(index, temp);
        teacherList.setListData(teachers.toArray());
    }

    @Action
    public void moveDown() {
        int index = teacherList.getSelectedIndex();
        Teacher temp = teachers.get(index + 1);
        teachers.set(index + 1, teachers.get(index));
        teachers.set(index, temp);
        teacherList.setListData(teachers.toArray());
    }

    @Action
    public void listPreference() {
        if (teachers.get(teacherList.getSelectedIndex()).getSubjectList().isEmpty()) {
            JOptionPane.showMessageDialog(null, "No subjects in preference list !", "Alert", JOptionPane.WARNING_MESSAGE);
        } else {
            SubjectList subjectList = new SubjectList(teachers.get(teacherList.getSelectedIndex()));
            subjectList.setLocationRelativeTo(this);
            subjectList.setVisible(true);
        }
    }

    @Action
    public void addSubject() {
        String name = JOptionPane.showInputDialog(null, "Enter name :", "Name", JOptionPane.QUESTION_MESSAGE);
        if (name == null || name.isEmpty()) {
            return;
        }
        String id = JOptionPane.showInputDialog(null, "Enter subject id :", "ID", JOptionPane.QUESTION_MESSAGE);
        if (id == null || id.isEmpty()) {
            return;
        }
        Subject s = new Subject(name.trim(), id.trim());
        if (subjects.contains(s)) {
            JOptionPane.showMessageDialog(null, "Subject with same id already exists !", "Error", JOptionPane.ERROR_MESSAGE);
            return;
        }
        subjects.add(s);
        subList.setListData(subjects.toArray());
    }

    @Action
    public void deleteSubject() {
        int index = subList.getSelectedIndex();
        if (JOptionPane.showConfirmDialog(null, "Delete subject ?", "Delete", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            subjects.remove(index);
            subList.setListData(subjects.toArray());
        }
    }

    @Action
    public void editSubject() {
        int index = subList.getSelectedIndex();
        Subject s = subjects.get(index);
        String name = JOptionPane.showInputDialog("Name :", s.getName());
        if (name == null || name.isEmpty()) {
            return;
        }
        String id = JOptionPane.showInputDialog("Subject id :", s.getId());
        if (id == null || id.isEmpty()) {
            return;
        }
        s = new Subject(name.trim(), id.trim());
        if (subjects.indexOf(s) != -1) {
            if (subjects.indexOf(s) != index || subjects.lastIndexOf(s) != index) {
                JOptionPane.showMessageDialog(null, "Subject with same id already exists !", "Alert", JOptionPane.ERROR_MESSAGE);
                return;
            }
        }
        subjects.set(index, s);
        subList.setListData(subjects.toArray());
    }

    @Action
    public void listTeachers() {
        ArrayList<Teacher> list = new ArrayList<Teacher>();
        for (Teacher t : teachers) {
            if (t.getSubjectList().contains(subjects.get(subList.getSelectedIndex()))) {
                list.add(t);
            }
        }
        if (list.isEmpty()) {
            JOptionPane.showMessageDialog(null, "No teachers have chosen this subject !", "Error", JOptionPane.WARNING_MESSAGE);
        } else {
            TeacherList tl = new TeacherList(list);
            tl.setLocationRelativeTo(this);
            tl.setVisible(true);
        }
    }

    @Action
    public void setUserPasswd() {
        ARMSManager.updateUser();
    }

    @Action
    public void setAdminPasswd() {
        ARMSManager.updateAdmin();
    }

    @Action
    public void viewSolution() {
        ARMSOutput aRMSOutput = new ARMSOutput(ARMSManager.getSolution(), javax.swing.WindowConstants.HIDE_ON_CLOSE);
        aRMSOutput.setLocationRelativeTo(this);
        aRMSOutput.setDefaultCloseOperation(HIDE_ON_CLOSE);
        aRMSOutput.setVisible(true);
    }

    @Action
    public void viewNewSolution() {
        ARMSOutput aRMSOutput = new ARMSOutput(ARMSManager.getNewSolution(),javax.swing.WindowConstants.HIDE_ON_CLOSE);
        aRMSOutput.setLocationRelativeTo(this);
        aRMSOutput.setDefaultCloseOperation(HIDE_ON_CLOSE);
        aRMSOutput.setVisible(true);
    }

    @Action
    public void writeSolution() {
        ARMSManager.updateSolution();
        JOptionPane.showMessageDialog(null, "New solution has been updated !", "Information", JOptionPane.INFORMATION_MESSAGE);
        this.dispose();
    }

    @Action
    public void discardSolution() {
        ARMSManager.discardSolution();
        JOptionPane.showMessageDialog(null, "New solution has been discarded !", "Information", JOptionPane.INFORMATION_MESSAGE);
        this.dispose();
    }
    private void teacherListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_teacherListValueChanged
        // TODO add your handling code here:
        int selectIndex = teacherList.getSelectedIndex();
        if (selectIndex == -1) {
            deleteTeacherButton.setEnabled(false);
            upButton.setEnabled(false);
            downButton.setEnabled(false);
            editTeacherButton.setEnabled(false);
            listButton.setEnabled(false);
            nameTextField.setText("");
            idTextField.setText("");
            loginTextField.setText("");
        } else {
            deleteTeacherButton.setEnabled(true);
            upButton.setEnabled(true);
            downButton.setEnabled(true);
            editTeacherButton.setEnabled(true);
            listButton.setEnabled(true);
            if (selectIndex == 0) {
                upButton.setEnabled(false);
            }
            if (selectIndex == teacherList.getModel().getSize() - 1) {
                downButton.setEnabled(false);
            }
            Teacher t = teachers.get(selectIndex);
            nameTextField.setText(t.getName());
            idTextField.setText(t.getId());
            loginTextField.setText(t.getLogin());
        }
    }//GEN-LAST:event_teacherListValueChanged

    private void subListValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_subListValueChanged
        // TODO add your handling code here:
        int selectIndex = subList.getSelectedIndex();
        if (selectIndex == -1) {
            deleteSubButton.setEnabled(false);
            editSubButton.setEnabled(false);
            listTeacherButton.setEnabled(false);
            subTextField.setText("");
            subIdTextField.setText("");
        } else {
            deleteSubButton.setEnabled(true);
            editSubButton.setEnabled(true);
            listTeacherButton.setEnabled(true);
            subTextField.setText(subjects.get(selectIndex).getName());
            subIdTextField.setText(subjects.get(selectIndex).getId());
        }
    }//GEN-LAST:event_subListValueChanged
    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton addSubButton;
    private javax.swing.JButton addTeacherButton;
    private javax.swing.JButton adminPasswdButton;
    private javax.swing.JTabbedPane adminTabbedPane;
    private javax.swing.JButton deleteSubButton;
    private javax.swing.JButton deleteTeacherButton;
    private javax.swing.JButton discardSolutionButton;
    private javax.swing.JButton downButton;
    private javax.swing.JButton editSubButton;
    private javax.swing.JButton editTeacherButton;
    private javax.swing.JLabel idLabel;
    private javax.swing.JTextField idTextField;
    private javax.swing.JButton listButton;
    private javax.swing.JButton listTeacherButton;
    private javax.swing.JLabel loginLabel;
    private javax.swing.JTextField loginTextField;
    private javax.swing.JLabel nameLabel;
    private javax.swing.JTextField nameTextField;
    private javax.swing.JButton psrButton;
    private javax.swing.JPanel settingsPanel;
    private javax.swing.JPanel solutionPanel;
    private javax.swing.JLabel subIdLabel;
    private javax.swing.JTextField subIdTextField;
    private javax.swing.JLabel subLabel;
    private javax.swing.JList subList;
    private javax.swing.JPanel subPanel;
    private javax.swing.JScrollPane subScrollPane;
    private javax.swing.JTextField subTextField;
    private javax.swing.JList teacherList;
    private javax.swing.JPanel teacherPanel;
    private javax.swing.JScrollPane teacherScrollPane;
    private javax.swing.JButton upButton;
    private javax.swing.JButton userPasswdButton;
    private javax.swing.JButton viewNewSolutionButton;
    private javax.swing.JButton viewSolutionButton;
    private javax.swing.JButton writeSolutionButton;
    // End of variables declaration//GEN-END:variables
    private ArrayList<Teacher> teachers;
    private ArrayList<Subject> subjects;
    private boolean flag;
}
